#!/usr/bin/env bash
#
# bootstrap installs things.
#
# Based on https://github.com/holman/dotfiles.

# Fail on errors.
set -euo pipefail

# Show executed commands.
# set -x

light_red='\e[01;31m'
green='\e[0;32m'
light_green='\e[01;32m'
light_yellow='\e[01;33m'
cyan='\e[0;36m'
light_cyan='\e[01;36m'
reset_color='\e[0m'
clear_line='\e[2K'

info() {
  printf   "\r  [%b INFO %b] %b\n" \
           "$light_cyan" "$reset_color" "$1"
}

user() {
  printf   "\r  [%b  ?   %b] %b " \
           "$light_yellow" "$reset_color" "$1"
}

success() {
  printf "\r%b  [%b  OK  %b] %b\n" \
         "$clear_line" "$light_green" "$reset_color" "$1"
}

fail() {
  printf "\r%b  [%b FAIL %b] %b\n\n" \
         "$clear_line" "$light_red" "$reset_color" "$1"
  exit 1
}

platforms() {
  case "$OSTYPE" in
    linux*)  printf 'linux';;
    darwin*) printf 'mac';;
    msys)    printf 'windows';;
    cygwin)  printf "cygwin\nwindows";;
    *)       printf '%s' "$OSTYPE";;
  esac
}

readlink_e() {
  local file="$1"

  if [[ "$(platforms)" == 'mac' ]]; then
    perl -e 'use Cwd "abs_path"; print abs_path(shift)' "$file"
    return
  fi

  readlink --canonicalize-existing "$file"
}

home_directory() {
  case "${1?Need platform}" in
    windows) printf '%s' "$(cygpath --unix "$USERPROFILE")";;
    *)       printf '%s' "$HOME";;
  esac
}

symlink() {
  local src="${1?Need link source}"
  # If dst is not given, use src file name in $HOME, prepended with a dot.
  local dst="$HOME/.${src##*/}"
  if [[ $# -ge 2 ]]; then
    dst="$2"
  fi

  local overwrite= backup= skip= same=

  if [[ -f "$dst" ]] || \
     [[ -d "$dst" ]] || \
     [[ -L "$dst" ]]; then
    local current_target
    current_target="$(readlink_e "$dst")"

    if [[ "$current_target" == "$src" ]]; then
      success "$(printf 'Already linked %b%s%b <-> %b%s%b' \
                        "$green" "$src" "$reset_color" \
                        "$green" "$dst" "$reset_color")"
      return
    fi

    if [[ "$overwrite_all" != 'true' ]] && \
       [[ "$backup_all" != 'true' ]] && \
       [[ "$skip_all" != 'true' ]]; then
      user "$(printf "File already exists: %b%s%b (%b%s%b)
                     Will be linked to: %b%s%b
                     What do you want to do? (%bs%b)kip, (%bS%b)kip all, (%bo%b)verwrite, (%bO%b)verwrite all, (%bb%b)ackup, (%bB%b)ackup all?" \
                     "$green" "$dst" "$reset_color" \
                     "$cyan" "$(file --brief "$dst")" "$reset_color" \
                     "$green" "$src" "$reset_color" \
                     "$light_yellow" "$reset_color" \
                     "$light_yellow" "$reset_color" \
                     "$light_yellow" "$reset_color" \
                     "$light_yellow" "$reset_color" \
                     "$light_yellow" "$reset_color" \
                     "$light_yellow" "$reset_color")"

      while true; do
          # Read from tty, needed because we read in outer loop.
          local action
          read -rn 1 action < /dev/tty

          case "$action" in
            o) overwrite=true;     break;;
            O) overwrite_all=true; break;;
            b) backup=true;        break;;
            B) backup_all=true;    break;;
            s) skip=true;          break;;
            S) skip_all=true;      break;;
            *) ;;
          esac
      done
    fi

    overwrite="${overwrite:-$overwrite_all}"
    backup="${backup:-$backup_all}"
    skip="${skip:-$skip_all}"

    if [[ "$skip" == 'true' ]]; then
      success "$(printf 'Skipped %b%s%b <-> %b%s%b' \
                        "$green" "$src" "$reset_color" \
                        "$green" "$dst" "$reset_color")"
      return
    fi

    if [[ "$overwrite" == 'true' ]]; then
      rm -rf -- "$dst"
      success "$(printf 'Removed %b%s%b' \
                        "$green" "$dst" "$reset_color")"
    fi

    if [[ "$backup" == 'true' ]]; then
      mv -- "$dst" "${dst}.backup"
      success "$(printf 'Moved %b%s%b to %b%s%b' \
                        "$green" "$dst" "$reset_color" \
                        "$green" "${dst}.backup" "$reset_color")"
    fi
  fi

  mkdir -p "$(dirname -- "$dst")"
  # Create native symlinks on Windows.
  CYGWIN=winsymlinks:nativestrict ln -s "$src" "$dst"

  success "$(printf 'Linked %b%s%b to %b%s%b' \
                    "$green" "$src" "$reset_color" \
                    "$green" "$dst" "$reset_color")"
}

install_dotfiles() {
  local dotfiles_root="$(dirname "$(readlink_e "$0")")"

  local overwrite_all= backup_all= skip_all=

  info "$(printf "Installing dotfiles from %b%s%b" \
                 "$green" "$dotfiles_root" "$reset_color")"

  source "$dotfiles_root/macos/homebrew"

  local platforms="$(platforms)"
  while IFS=$'\n' read -r platform; do
    local home="$(home_directory "$platform")"

    info "$(printf "Installing dotfiles to %b\$HOME%b=%b%s%b for %b\$OSTYPE%b=%b%s%b" \
                   "$light_red" "$reset_color" \
                   "$green" "$home" "$reset_color" \
                   "$light_red" "$reset_color" \
                   "$light_yellow" "$platform" "$reset_color")"

    # First, add a symlink for this dotfiles directory.
    symlink "$dotfiles_root" "$home/.dotfiles"

    # Find direct child directories (topics).
    local topics="$(/usr/bin/find "$dotfiles_root" -mindepth 1 -maxdepth 1 -type d | sort)"
    while IFS=$'\n' read -r topic; do
      [[ -z "$topic" ]] && continue

      # Find (optional) topic/bootstrap script and run it.
      local bootstrap="$topic/bootstrap"
      if [[ -f "$bootstrap" ]]; then
        info "$(printf 'Running %b%s%b' \
                        "$green" "$bootstrap" "$reset_color")"

        # Run script from inside topic.
        HOME="$home" OSTYPE="$platform" source "$bootstrap"
      fi
    done <<< "$topics"
  done <<< "$platforms"

#  [[ "$OSTYPE" == "linux-gnu" ]]; "$dotfiles_root/install/installUbuntu.sh" install_all &> /dev/null

  info "$(printf 'All installed from %b%s%b' \
                 "$green" "$dotfiles_root" "$reset_color")"
}

install_dotfiles
